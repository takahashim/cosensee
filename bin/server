#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'cosensee'

require 'falcon'
require 'async/http/endpoint'
require 'async'
require 'uri'
require 'mini_mime'

DIRECTORY_TO_SERVE = './public'

# for static files
module StaticFileHandler
  def self.call(env)
    path_info = env['PATH_INFO']
    path_info = if path_info.start_with?('/')
                  "/#{URI.decode_www_form_component(path_info.slice(1..-1))}"
                else
                  URI.decode_www_form_component(path_info)
                end
    path = File.join(DIRECTORY_TO_SERVE, path_info)
    path = File.join(path, 'index.html') if File.directory?(path)

    if File.exist?(path) && !File.directory?(path)
      content = File.read(path)
      content_type = MiniMime.lookup_by_filename(path).content_type
      [200, { 'Content-Type' => content_type, 'Content-Length' => content.bytesize.to_s }, [content]]
    else
      [404, { 'Content-Type' => 'text/plain' }, ["File not found: #{env['PATH_INFO']}"]]
    end
  end
end

filename = ARGV[0]

if filename
  puts "build #{filename}..."
  project = Cosensee::Project.parse_file(filename)
  builder = Cosensee::HtmlBuilder.new(project)
  builder.build_all
  puts 'build done.'
end

Async do
  endpoint = Async::HTTP::Endpoint.parse('http://localhost:1212')
  app = Falcon::Server.middleware(StaticFileHandler)
  server = Falcon::Server.new(app, endpoint)
  server.run.wait
end

puts "Serving files from #{File.expand_path(DIRECTORY_TO_SERVE)} at http://localhost:1212"
